{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "rating",
  "type": "registry:component",
  "title": "Rating",
  "description": "Rating component",
  "registryDependencies": [],
  "files": [
    {
      "path": "src/components/ui/rating.tsx",
      "content": "\"use client\";\r\n\r\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\r\nimport { type LucideProps, StarIcon } from \"lucide-react\";\r\nimport type { KeyboardEvent, MouseEvent, ReactElement, ReactNode } from \"react\";\r\nimport {\r\n  Children,\r\n  cloneElement,\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype RatingContextValue = {\r\n  value: number;\r\n  readOnly: boolean;\r\n  hoverValue: number | null;\r\n  focusedStar: number | null;\r\n  handleValueChange: (\r\n    event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>,\r\n    value: number\r\n  ) => void;\r\n  handleKeyDown: (event: KeyboardEvent<HTMLButtonElement>) => void;\r\n  setHoverValue: (value: number | null) => void;\r\n  setFocusedStar: (value: number | null) => void;\r\n};\r\n\r\nconst RatingContext = createContext<RatingContextValue | null>(null);\r\n\r\nconst useRating = () => {\r\n  const context = useContext(RatingContext);\r\n  if (!context) {\r\n    throw new Error(\"useRating must be used within a Rating component\");\r\n  }\r\n  return context;\r\n};\r\n\r\nexport type RatingButtonProps = LucideProps & {\r\n  index?: number;\r\n  icon?: ReactElement<LucideProps>;\r\n};\r\n\r\nexport const RatingButton = ({\r\n  index: providedIndex,\r\n  size = 20,\r\n  className,\r\n  icon = <StarIcon />,\r\n}: RatingButtonProps) => {\r\n  const {\r\n    value,\r\n    readOnly,\r\n    hoverValue,\r\n    focusedStar,\r\n    handleValueChange,\r\n    handleKeyDown,\r\n    setHoverValue,\r\n    setFocusedStar,\r\n  } = useRating();\r\n\r\n  const index = providedIndex ?? 0;\r\n  const isActive = index < (hoverValue ?? focusedStar ?? value ?? 0);\r\n  let tabIndex = -1;\r\n\r\n  if (!readOnly) {\r\n    tabIndex = value === index + 1 ? 0 : -1;\r\n  }\r\n\r\n  const handleClick = useCallback(\r\n    (event: MouseEvent<HTMLButtonElement>) => {\r\n      handleValueChange(event, index + 1);\r\n    },\r\n    [handleValueChange, index]\r\n  );\r\n\r\n  const handleMouseEnter = useCallback(() => {\r\n    if (!readOnly) {\r\n      setHoverValue(index + 1);\r\n    }\r\n  }, [readOnly, setHoverValue, index]);\r\n\r\n  const handleFocus = useCallback(() => {\r\n    setFocusedStar(index + 1);\r\n  }, [setFocusedStar, index]);\r\n\r\n  const handleBlur = useCallback(() => {\r\n    setFocusedStar(null);\r\n  }, [setFocusedStar]);\r\n\r\n  return (\r\n    <button\r\n      className={cn(\r\n        \"rounded-full focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\r\n        \"p-0.5\",\r\n        readOnly && \"cursor-not-allowed\",\r\n        className\r\n      )}\r\n      disabled={readOnly}\r\n      onBlur={handleBlur}\r\n      onClick={handleClick}\r\n      onFocus={handleFocus}\r\n      onKeyDown={handleKeyDown}\r\n      onMouseEnter={handleMouseEnter}\r\n      tabIndex={tabIndex}\r\n      type=\"button\"\r\n    >\r\n      {cloneElement(icon, {\r\n        size,\r\n        className: cn(\r\n          \"transition-colors duration-200\",\r\n          isActive && \"fill-current\",\r\n          !readOnly && \"cursor-pointer\"\r\n        ),\r\n        \"aria-hidden\": \"true\",\r\n      })}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport type RatingProps = {\r\n  defaultValue?: number;\r\n  value?: number;\r\n  onChange?: (\r\n    event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>,\r\n    value: number\r\n  ) => void;\r\n  onValueChange?: (value: number) => void;\r\n  readOnly?: boolean;\r\n  className?: string;\r\n  children?: ReactNode;\r\n};\r\n\r\nexport const Rating = ({\r\n  value: controlledValue,\r\n  onValueChange: controlledOnValueChange,\r\n  defaultValue = 0,\r\n  onChange,\r\n  readOnly = false,\r\n  className,\r\n  children,\r\n  ...props\r\n}: RatingProps) => {\r\n  const [hoverValue, setHoverValue] = useState<number | null>(null);\r\n  const [focusedStar, setFocusedStar] = useState<number | null>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const [value, onValueChange] = useControllableState({\r\n    defaultProp: defaultValue,\r\n    prop: controlledValue,\r\n    onChange: controlledOnValueChange,\r\n  });\r\n\r\n  const handleValueChange = useCallback(\r\n    (\r\n      event: MouseEvent<HTMLButtonElement> | KeyboardEvent<HTMLButtonElement>,\r\n      newValue: number\r\n    ) => {\r\n      if (!readOnly) {\r\n        onChange?.(event, newValue);\r\n        onValueChange?.(newValue);\r\n      }\r\n    },\r\n    [readOnly, onChange, onValueChange]\r\n  );\r\n\r\n  const handleKeyDown = useCallback(\r\n    (event: KeyboardEvent<HTMLButtonElement>) => {\r\n      if (readOnly) {\r\n        return;\r\n      }\r\n\r\n      const total = Children.count(children);\r\n      let newValue = focusedStar !== null ? focusedStar : (value ?? 0);\r\n\r\n      switch (event.key) {\r\n        case \"ArrowRight\":\r\n          if (event.shiftKey || event.metaKey) {\r\n            newValue = total;\r\n          } else {\r\n            newValue = Math.min(total, newValue + 1);\r\n          }\r\n          break;\r\n        case \"ArrowLeft\":\r\n          if (event.shiftKey || event.metaKey) {\r\n            newValue = 1;\r\n          } else {\r\n            newValue = Math.max(1, newValue - 1);\r\n          }\r\n          break;\r\n        default:\r\n          return;\r\n      }\r\n\r\n      event.preventDefault();\r\n      setFocusedStar(newValue);\r\n      handleValueChange(event, newValue);\r\n    },\r\n    [focusedStar, value, children, readOnly, handleValueChange]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (focusedStar !== null && containerRef.current) {\r\n      const buttons = containerRef.current.querySelectorAll(\"button\");\r\n      buttons[focusedStar - 1]?.focus();\r\n    }\r\n  }, [focusedStar]);\r\n\r\n  const contextValue: RatingContextValue = {\r\n    value: value ?? 0,\r\n    readOnly,\r\n    hoverValue,\r\n    focusedStar,\r\n    handleValueChange,\r\n    handleKeyDown,\r\n    setHoverValue,\r\n    setFocusedStar,\r\n  };\r\n\r\n  return (\r\n    <RatingContext.Provider value={contextValue}>\r\n      <div\r\n        aria-label=\"Rating\"\r\n        className={cn(\"inline-flex items-center gap-0.5\", className)}\r\n        onMouseLeave={() => setHoverValue(null)}\r\n        ref={containerRef}\r\n        role=\"radiogroup\"\r\n        {...props}\r\n      >\r\n        {Children.map(children, (child, index) => {\r\n          if (!child) {\r\n            return null;\r\n          }\r\n\r\n          return cloneElement(child as ReactElement<RatingButtonProps>, {\r\n            index,\r\n          });\r\n        })}\r\n      </div>\r\n    </RatingContext.Provider>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}
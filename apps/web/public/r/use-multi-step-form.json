{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-multi-step-form",
  "type": "registry:hook",
  "title": "Multi-step form hook",
  "description": "Multi-step form hook",
  "files": [
    {
      "path": "src/hooks/use-multi-step-form.tsx",
      "content": "\"use client\";\r\nimport { createContext, useContext, useState, type ReactNode } from \"react\";\r\nimport type { JSX } from \"react\";\r\n\r\nexport interface Stepfields {\r\n  fields: string[];\r\n  component: JSX.Element;\r\n}\r\n\r\ninterface UseFormStepsProps {\r\n  initialSteps: Stepfields[];\r\n  onStepValidation?: (step: keyof Stepfields) => Promise<boolean> | boolean;\r\n}\r\n\r\nexport interface UseMultiFormStepsReturn {\r\n  steps: Stepfields[];\r\n  currentStepIndex: number;\r\n  currentStepData: Stepfields;\r\n  progress: number;\r\n  isFirstStep: boolean;\r\n  isLastStep: boolean;\r\n  goToNext: () => Promise<boolean>;\r\n  goToPrevious: () => void;\r\n  goToFirstStep: () => void;\r\n  goToStep: (stepNumber: number) => void;\r\n  setSteps: (newSteps: Stepfields[]) => void;\r\n}\r\n\r\n// Context type\r\ninterface MultiStepFormContextType\r\n  extends UseMultiFormStepsReturn {}\r\n\r\n// Create context\r\nconst MultiStepFormContext = createContext<MultiStepFormContextType | null>(\r\n  null\r\n);\r\n\r\n// Provider props\r\ninterface MultiStepFormProviderProps {\r\n  children: ReactNode;\r\n  initialSteps: Stepfields[];\r\n  onStepValidation?: (step: keyof Stepfields) => Promise<boolean> | boolean;\r\n}\r\n\r\n// Provider component\r\nexport function MultiStepFormProvider({\r\n  children,\r\n  initialSteps,\r\n  onStepValidation,\r\n}: MultiStepFormProviderProps) {\r\n  const [steps, setStepsState] = useState<Stepfields[]>(initialSteps);\r\n  const [currentStepIndex, setCurrentStepIndex] = useState(1);\r\n\r\n  const goToNext = async () => {\r\n    const currentStepData = steps[currentStepIndex - 1];\r\n\r\n    if (onStepValidation) {\r\n      const isValid = await onStepValidation(currentStepData.fields[0] as keyof Stepfields);\r\n      if (!isValid) return false;\r\n    }\r\n\r\n    if (currentStepIndex < steps.length) {\r\n      setCurrentStepIndex((prev) => prev + 1);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const goToPrevious = () => {\r\n    if (currentStepIndex > 1) {\r\n      setCurrentStepIndex((prev) => prev - 1);\r\n    }\r\n  };\r\n\r\n  const goToFirstStep = () => {\r\n    setCurrentStepIndex(1);\r\n  };\r\n\r\n  const goToStep = (stepNumber: number) => {\r\n    if (stepNumber >= 1 && stepNumber <= steps.length) {\r\n      setCurrentStepIndex(stepNumber);\r\n    }\r\n  };\r\n\r\n  const setSteps = (newSteps: Stepfields[]) => {\r\n    setStepsState(newSteps);\r\n    // Reset to first step if current step is out of bounds\r\n    if (currentStepIndex > newSteps.length) {\r\n      setCurrentStepIndex(1);\r\n    }\r\n  };\r\n\r\n  const value: MultiStepFormContextType = {\r\n    steps,\r\n    currentStepIndex: currentStepIndex,\r\n    currentStepData: steps[currentStepIndex - 1],\r\n    progress: (currentStepIndex / steps.length) * 100,\r\n    isFirstStep: currentStepIndex === 1,\r\n    isLastStep: currentStepIndex === steps.length,\r\n    goToNext,\r\n    goToPrevious,\r\n    goToFirstStep,\r\n    goToStep,\r\n    setSteps,\r\n  };\r\n\r\n  return (\r\n    <MultiStepFormContext.Provider value={value}>\r\n      {children}\r\n    </MultiStepFormContext.Provider>\r\n  );\r\n}\r\n\r\n// Hook to consume context\r\nexport function useMultiStepForm(): UseMultiFormStepsReturn {\r\n  const context = useContext(MultiStepFormContext);\r\n\r\n  if (!context) {\r\n    throw new Error(\r\n      \"useMultiStepForm must be used within a MultiStepFormProvider\"\r\n    );\r\n  }\r\n\r\n  return context as UseMultiFormStepsReturn;\r\n}\r\n",
      "type": "registry:hook",
      "target": "hooks/use-multi-step-form.tsx"
    }
  ]
}
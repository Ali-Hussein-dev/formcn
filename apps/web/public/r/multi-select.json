{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-select",
  "type": "registry:component",
  "title": "Multi-select",
  "description": "Multi-select dropdown",
  "registryDependencies": [
    "popover",
    "command",
    "badge",
    "button"
  ],
  "files": [
    {
      "path": "src/components/ui/multi-select.tsx",
      "content": "\"use client\";\r\n\r\nimport { CheckIcon, ChevronsUpDownIcon, XIcon } from \"lucide-react\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n  CommandSeparator,\r\n} from \"@/components/ui/command\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/components/ui/popover\";\r\nimport {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  type ComponentPropsWithoutRef,\r\n  type ReactNode,\r\n} from \"react\";\r\n\r\ntype MultiSelectContextType = {\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  selectedValues: Set<string>;\r\n  toggleValue: (value: string) => void;\r\n  items: Map<string, ReactNode>;\r\n  onItemAdded: (value: string, label: ReactNode) => void;\r\n};\r\nconst MultiSelectContext = createContext<MultiSelectContextType | null>(null);\r\n\r\nexport function MultiSelect({\r\n  children,\r\n  values,\r\n  defaultValues,\r\n  onValuesChange,\r\n}: {\r\n  children: ReactNode;\r\n  values?: string[];\r\n  defaultValues?: string[];\r\n  onValuesChange?: (values: string[]) => void;\r\n}) {\r\n  const [open, setOpen] = useState(false);\r\n  const [internalValues, setInternalValues] = useState(\r\n    new Set<string>(values ?? defaultValues)\r\n  );\r\n  const selectedValues = values ? new Set(values) : internalValues;\r\n  const [items, setItems] = useState<Map<string, ReactNode>>(new Map());\r\n\r\n  function toggleValue(value: string) {\r\n    const getNewSet = (prev: Set<string>) => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(value)) {\r\n        newSet.delete(value);\r\n      } else {\r\n        newSet.add(value);\r\n      }\r\n      return newSet;\r\n    };\r\n    setInternalValues(getNewSet);\r\n    onValuesChange?.([...getNewSet(selectedValues)]);\r\n  }\r\n\r\n  const onItemAdded = useCallback((value: string, label: ReactNode) => {\r\n    setItems((prev) => {\r\n      if (prev.get(value) === label) return prev;\r\n      return new Map(prev).set(value, label);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <MultiSelectContext\r\n      value={{\r\n        open,\r\n        setOpen,\r\n        selectedValues,\r\n        toggleValue,\r\n        items,\r\n        onItemAdded,\r\n      }}\r\n    >\r\n      <Popover open={open} onOpenChange={setOpen} modal={true}>\r\n        {children}\r\n      </Popover>\r\n    </MultiSelectContext>\r\n  );\r\n}\r\n\r\nexport function MultiSelectTrigger({\r\n  className,\r\n  children,\r\n  ...props\r\n}: {\r\n  className?: string;\r\n  children?: ReactNode;\r\n} & ComponentPropsWithoutRef<typeof Button>) {\r\n  const { open } = useMultiSelectContext();\r\n\r\n  return (\r\n    <PopoverTrigger asChild>\r\n      <Button\r\n        {...props}\r\n        variant={props.variant ?? \"outline\"}\r\n        role={props.role ?? \"combobox\"}\r\n        aria-expanded={props[\"aria-expanded\"] ?? open}\r\n        className={cn(\r\n          \"flex h-auto min-h-9 w-fit items-center justify-between gap-2 overflow-hidden rounded-md border border-input bg-transparent px-3 py-1.5 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:border-ring focus-visible:ring-[3px] focus-visible:ring-ring/50 disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 data-[placeholder]:text-muted-foreground dark:bg-input/30 dark:hover:bg-input/50 dark:aria-invalid:ring-destructive/40 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 [&_svg:not([class*='text-'])]:text-muted-foreground\",\r\n          className\r\n        )}\r\n      >\r\n        {children}\r\n        <ChevronsUpDownIcon className=\"size-4 shrink-0 opacity-50\" />\r\n      </Button>\r\n    </PopoverTrigger>\r\n  );\r\n}\r\n\r\nexport function MultiSelectValue({\r\n  placeholder,\r\n  clickToRemove = true,\r\n  className,\r\n  overflowBehavior = \"wrap\",\r\n  ...props\r\n}: {\r\n  placeholder?: string;\r\n  clickToRemove?: boolean;\r\n  overflowBehavior?: \"wrap\" | \"wrap-when-open\" | \"cutoff\";\r\n} & Omit<ComponentPropsWithoutRef<\"div\">, \"children\">) {\r\n  const { selectedValues, toggleValue, items, open } = useMultiSelectContext();\r\n  const [overflowAmount, setOverflowAmount] = useState(0);\r\n  const valueRef = useRef<HTMLDivElement>(null);\r\n  const overflowRef = useRef<HTMLDivElement>(null);\r\n\r\n  const shouldWrap =\r\n    overflowBehavior === \"wrap\" ||\r\n    (overflowBehavior === \"wrap-when-open\" && open);\r\n\r\n  const checkOverflow = useCallback(() => {\r\n    if (valueRef.current == null) return;\r\n\r\n    const containerElement = valueRef.current;\r\n    const overflowElement = overflowRef.current;\r\n    const items = containerElement.querySelectorAll<HTMLElement>(\r\n      \"[data-selected-item]\"\r\n    );\r\n\r\n    if (overflowElement != null) overflowElement.style.display = \"none\";\r\n    items.forEach((child) => child.style.removeProperty(\"display\"));\r\n    let amount = 0;\r\n    for (let i = items.length - 1; i >= 0; i--) {\r\n      const child = items[i]!;\r\n      if (containerElement.scrollWidth <= containerElement.clientWidth) {\r\n        break;\r\n      }\r\n      amount = items.length - i;\r\n      child.style.display = \"none\";\r\n      overflowElement?.style.removeProperty(\"display\");\r\n    }\r\n    setOverflowAmount(amount);\r\n  }, []);\r\n\r\n  const handleResize = useCallback(\r\n    (node: HTMLDivElement) => {\r\n      valueRef.current = node;\r\n\r\n      const observer = new ResizeObserver(checkOverflow);\r\n      observer.observe(node);\r\n\r\n      return () => {\r\n        observer.disconnect();\r\n        valueRef.current = null;\r\n      };\r\n    },\r\n    [checkOverflow]\r\n  );\r\n\r\n  if (selectedValues.size === 0 && placeholder) {\r\n    return (\r\n      <span className=\"min-w-0 overflow-hidden font-normal text-muted-foreground\">\r\n        {placeholder}\r\n      </span>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      {...props}\r\n      ref={handleResize}\r\n      className={cn(\r\n        \"flex w-fit gap-1.5 overflow-hidden\",\r\n        shouldWrap && \"h-full flex-wrap\",\r\n        className\r\n      )}\r\n    >\r\n      {[...selectedValues]\r\n        .filter((value) => items.has(value))\r\n        .map((value) => (\r\n          <Badge\r\n            variant=\"outline\"\r\n            data-selected-item\r\n            className=\"group flex items-center gap-1\"\r\n            key={value}\r\n            onClick={\r\n              clickToRemove\r\n                ? (e) => {\r\n                    e.stopPropagation();\r\n                    toggleValue(value);\r\n                  }\r\n                : undefined\r\n            }\r\n          >\r\n            {items.get(value)}\r\n            {clickToRemove && (\r\n              <XIcon className=\"size-2 text-muted-foreground group-hover:text-destructive\" />\r\n            )}\r\n          </Badge>\r\n        ))}\r\n      <Badge\r\n        style={{\r\n          display: overflowAmount > 0 && !shouldWrap ? \"block\" : \"none\",\r\n        }}\r\n        variant=\"outline\"\r\n        ref={overflowRef}\r\n      >\r\n        +{overflowAmount}\r\n      </Badge>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function MultiSelectContent({\r\n  search = true,\r\n  children,\r\n  ...props\r\n}: {\r\n  search?: boolean | { placeholder?: string; emptyMessage?: string };\r\n  children: ReactNode;\r\n} & Omit<ComponentPropsWithoutRef<typeof Command>, \"children\">) {\r\n  const canSearch = typeof search === \"object\" ? true : search;\r\n\r\n  return (\r\n    <>\r\n      <div style={{ display: \"none\" }}>\r\n        <Command>\r\n          <CommandList>{children}</CommandList>\r\n        </Command>\r\n      </div>\r\n      <PopoverContent className=\"min-w-[var(--radix-popover-trigger-width)] p-0\">\r\n        <Command {...props}>\r\n          {canSearch ? (\r\n            <CommandInput\r\n              placeholder={\r\n                typeof search === \"object\" ? search.placeholder : undefined\r\n              }\r\n            />\r\n          ) : (\r\n            <button autoFocus className=\"sr-only\" />\r\n          )}\r\n          <CommandList>\r\n            {canSearch && (\r\n              <CommandEmpty>\r\n                {typeof search === \"object\" ? search.emptyMessage : undefined}\r\n              </CommandEmpty>\r\n            )}\r\n            {children}\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </>\r\n  );\r\n}\r\n\r\nexport function MultiSelectItem({\r\n  value,\r\n  children,\r\n  badgeLabel,\r\n  onSelect,\r\n  ...props\r\n}: {\r\n  badgeLabel?: ReactNode;\r\n  value: string;\r\n} & Omit<ComponentPropsWithoutRef<typeof CommandItem>, \"value\">) {\r\n  const { toggleValue, selectedValues, onItemAdded } = useMultiSelectContext();\r\n  const isSelected = selectedValues.has(value);\r\n\r\n  useEffect(() => {\r\n    onItemAdded(value, badgeLabel ?? children);\r\n  }, [value, children, onItemAdded, badgeLabel]);\r\n\r\n  return (\r\n    <CommandItem\r\n      {...props}\r\n      onSelect={() => {\r\n        toggleValue(value);\r\n        onSelect?.(value);\r\n      }}\r\n    >\r\n      <CheckIcon\r\n        className={cn(\r\n          \"mr-2 ml-1.5 size-4\",\r\n          isSelected ? \"opacity-100\" : \"opacity-0\"\r\n        )}\r\n      />\r\n      {children}\r\n    </CommandItem>\r\n  );\r\n}\r\n\r\nexport function MultiSelectGroup(\r\n  props: ComponentPropsWithoutRef<typeof CommandGroup>\r\n) {\r\n  return <CommandGroup {...props} />;\r\n}\r\n\r\nexport function MultiSelectSeparator(\r\n  props: ComponentPropsWithoutRef<typeof CommandSeparator>\r\n) {\r\n  return <CommandSeparator {...props} />;\r\n}\r\n\r\nfunction useMultiSelectContext() {\r\n  const context = useContext(MultiSelectContext);\r\n  if (context == null) {\r\n    throw new Error(\r\n      \"useMultiSelectContext must be used within a MultiSelectContext\"\r\n    );\r\n  }\r\n  return context;\r\n}\r\n",
      "type": "registry:component"
    }
  ]
}